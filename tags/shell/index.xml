<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on 梦还在吗</title>
    <link>http://example.org/tags/shell/</link>
    <description>Recent content in Shell on 梦还在吗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 May 2020 14:23:15 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shell脚本字体颜色</title>
      <link>http://example.org/posts/shell%E8%84%9A%E6%9C%AC%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</link>
      <pubDate>Sat, 09 May 2020 14:23:15 +0000</pubDate>
      
      <guid>http://example.org/posts/shell%E8%84%9A%E6%9C%AC%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</guid>
      <description>Shell脚本字体颜色 echo -e &amp;quot;\033[背景颜色；字体颜色m字符串\033[0m&amp;quot; 例：echo -e &amp;quot;\033[41;36m something here \033[0m&amp;quot; 注： 1、背景颜色和字体颜色之间是英文的“;” 2、文字颜色后面有个m 3、字符串前后可以没有空格，如果有的话，输出也有空格(echo -e &amp;quot;\033[31mhello\033[0m&amp;quot;) echo -e &amp;quot;\033[44;31;5m ME \033[0m COOL&amp;quot; 以上命令设置背景为蓝色，红色字体，闪烁光标，输出字符“ME”，0\33[0m重新设置屏幕到缺省设置，输出字符 COOL，“-e”是命令 echo 的一个可选项，它用于激活特殊字符的解析器。“\033”引导非常规字符序列。“m”意味着设置属性然后结束非常规字符序列，这个例子里真正有效的字符是 “44;37;5” 和“0&amp;rdquo;， 修改“44;37;5”可以生成不同颜色的组合，数值和编码的前后顺序没有关系
下面是相应的字和背景颜色 字体颜色范围：30—–37 背景颜色范围：40—–47
echo -e “\033[30m 黑色字 \033[0m” echo -e “\033[40m 黑底 \033[0m” echo -e “\033[31m 红色字 \033[0m” echo -e “\033[41m 红底 \033[0m” echo -e “\033[32m 绿色字 \033[0m” echo -e “\033[42m 绿底 \033[0m” echo -e “\033[33m 黄色字 \033[0m” echo -e “\033[43m 黄底 \033[0m” echo -e “\033[34m 蓝色字 \033[0m” echo -e “\033[44m 蓝底 \033[0m” echo -e “\033[35m 紫色字 \033[0m” echo -e “\033[45m 紫底 \033[0m” echo -e “\033[36m 天蓝字 \033[0m” echo -e “\033[46m 天蓝底 \033[0m” echo -e “\033[37m 白色字 \033[0m”　echo -e “\033[47m 白底 \033[0m” 面控制选项说明</description>
    </item>
    
    <item>
      <title>shell实现随机数多种方法</title>
      <link>http://example.org/posts/shell%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 09 May 2020 10:45:13 +0000</pubDate>
      
      <guid>http://example.org/posts/shell%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>shell实现随机数多种方法 日常生活中，会经常用到随机数，使用场景非常广泛，例如买彩票、丢骰子、抽签、年会抽奖等。
Shell 下如何生成随机数呢，米扑博客特意写了本文，总结 Linux Shell 产生随机数的多种方法。
计算机产生的的只是“伪随机数”，不会产生绝对的随机数（是一种理想随机数）。实际上，伪随机数和理想随机数也是相对的概念，例如伪随机数在1万万亿亿亿年内也无法重复，算是理想随机数么？
伪随机数在大量重现时也并不一定保持唯一，但一个好的伪随机产生算法将可以产生一个非常长的不重复的序列，例如 UUID（通用唯一识别码）在100亿年内才可用完。
使用系统的 $RANDOM 变量（CentOS、Ubuntu、MacOS 都支持，但只有5位数随机) mimvp@ubuntu:~$ echo $RANDOM 17617 $RANDOM 的范围是 [0, 32767]
示例：使用 for 循环来验证：
#!/bin/bash function print_random() { for i in {1..10}; do echo -e &amp;quot;$i \t $RANDOM&amp;quot; done } print_random 运行结果：
 # sh mimvp_shell_rand.sh 1 20191 2 16817 3 25971 4 1489 5 34 6 25183 7 920 8 315 9 18845 10 29519
 如需要生成超过32767的随机数，可以用以下方法实现（有缺陷）
例：生成 40,000,000~50,000,000 的随机数，但最后末尾五位数在随机变化，实现原理有缺陷</description>
    </item>
    
    <item>
      <title>Shell 流程控制</title>
      <link>http://example.org/posts/shell-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 29 Apr 2020 12:16:28 +0000</pubDate>
      
      <guid>http://example.org/posts/shell-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>Shell 流程控制 和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：
&amp;lt;?php if (isset($_GET[&amp;quot;q&amp;quot;])) { search(q); } else { // 不做任何事情 } 在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。
 if else if if 语句语法格式：
if condition then command1 command2 ... commandN fi 写成一行（适用于终端命令提示符）：
if \[ $(ps \-ef | grep \-c &amp;quot;ssh&amp;quot;) \-gt 1 \]; then echo &amp;quot;true&amp;quot;; fi
末尾的fi就是if倒过来拼写，后面还会遇到类似的。
if else if else 语法格式：
if condition then command1 command2 ... commandN else command fi if else-if else if else-if else 语法格式：
if condition1 then command1 elif condition2 then command2 else commandN fi 以下实例判断两个变量是否相等：</description>
    </item>
    
    <item>
      <title>Shell 中的括号</title>
      <link>http://example.org/posts/shell-%E4%B8%AD%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Wed, 29 Apr 2020 10:25:14 +0000</pubDate>
      
      <guid>http://example.org/posts/shell-%E4%B8%AD%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>Shell 中的括号 主要包括一下几种
 ${var} $(cmd) ()和{} ${var:-string},${var:+string},${var:=string},${var:?string} $((exp)) $(var%pattern),$(var%%pattern),$(var#pattern),$(var##pattern)  现在分述如下：
Shell中变量的原形：${var} 大家常见的变量形式都是$var,如
$ var=test $ echo $var test 但当你要显示变量值加随意的字符(我这里用AA)时，就会出错，如下：
$ echo $varAA $ 这时应该用变量的原形：${var}，即是加一个大括号来限定变量名称的范围，如下
$ echo ${var}AA testAA $ 以这个特性，我们可以很方便地写一个批量改后缀名的程序，我把它命名为mymv，程序如下：
#!/bin/bash tail=$1 for filename in \`ls\` do mv $filename ${filename}.$tail done 程序需要提供一个后缀名，如c，表示改为后缀为c的C程序文件，看下面的测试：
$ ls a b c $ mymv c $ ls a.c b.c c.c $ 看样子程序运行的很好，但这是不完善的程序，有2个要注意的问题： A,目录下没有子目录，如果有一个目录，假设为dir，则也会被改为dir.c，这显然不是我们想要的，应该修正这个程序能识别目录。 B,没有帮助对程序的参数进行处理，程序应该足够友好，在用户没有给定后缀名时应能处理，像上面的将直接给文件加上了一个点(.),这显然也不是我们想要的。
因为我们的目的是说明${var}，这样已经足够了，因此这里不会再对上面的程序进行修正。
命令替换$(cmd) 命令替换$(cmd)和符号`cmd`(注意这不是单引号，在美式键盘上，`是ESC下面的那个键)有相同之处
$ ls a b c $ echo $(ls) a b c $ echo `ls` a b c 我们来分析一下命令echo $(ls)，以便理解所谓命令替换是什么意思： shell扫描一遍命令行，发现了$(cmd)结构，便将$(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令echo $(ls)中的$(ls)位置，即替换了$(ls),再执行echo命令。 如下： echo $(ls)被替换成了echo a b c 这里要注意的是$(cmd)中的命令的错误输出是不会被替换的，替换的只是标准输出：</description>
    </item>
    
    <item>
      <title>习题</title>
      <link>http://example.org/posts/%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Fri, 24 Apr 2020 10:25:08 +0000</pubDate>
      
      <guid>http://example.org/posts/%E4%B9%A0%E9%A2%98/</guid>
      <description>习题 浮点运算，比如实现求圆的面积和周长。  expr 只能用于整数计算，可以使用 bc 或者 awk 进行浮点数运算。
 #!/bin/bash raduis=2.4 pi=3.14159 girth=$(echo &amp;#34;scale=4; 3.14 * 2 * $raduis&amp;#34; | bc) area=$(echo &amp;#34;scale=4; 3.14 * $raduis* $raduis&amp;#34; | bc) echo &amp;#34;girth=$girth&amp;#34; echo &amp;#34;area=$area&amp;#34;  以上代码如果想在环境中运行，需要先安装 bc。
 $ sudo apt-get update $ sudo apt-get install bc bash挑战-矩形的面积和周长 已知条件 矩形的长 a=3，宽 b=2
目标 创建一个 Area.sh，能够计算此矩形的面积，输出面积的值
创建一个 Cum.sh,能够计算此矩形的周长，输出周长的值
注意  文件名一定要一致，以便于验证结果 文件创建在 /home/shiyanlou/ 下  参考代码 注意：请务必先独立思考获得 PASS 之后再查看参考代码，直接拷贝代码收获不大
此题解法不唯一，这里只是给出其中一种作为参考。
/home/shiyanlou/Area.sh 的参考代码：</description>
    </item>
    
    <item>
      <title>函数</title>
      <link>http://example.org/posts/%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 24 Apr 2020 10:24:19 +0000</pubDate>
      
      <guid>http://example.org/posts/%E5%87%BD%E6%95%B0/</guid>
      <description>函数 函数定义 shell中函数的定义格式如下：
[ function ] funname [()] { action; [return int;] } 说明：
  可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。     参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)   下面的例子定义了一个函数并进行调用：
#!/bin/bash demoFun(){ echo &amp;quot;This is my first shell function!&amp;quot; } echo &amp;quot;-----Execution-----&amp;quot; demoFun echo &amp;quot;-----Finished-----&amp;quot; Output the result： -----Execution----- This is my first shell function! -----Finished----- 下面定义一个带有return语句的函数：
#!/bin/bash funWithReturn(){ echo &amp;quot;This function will add the two numbers of the input...&amp;quot; echo &amp;quot;Enter the first number: &amp;quot; read aNum echo &amp;quot;Enter the second number: &amp;quot; read anotherNum echo &amp;quot;The two numbers are $aNum and $anotherNum !</description>
    </item>
    
    <item>
      <title>基本运算符</title>
      <link>http://example.org/posts/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 24 Apr 2020 10:06:17 +0000</pubDate>
      
      <guid>http://example.org/posts/%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>基本运算符 算数运算符 $vim test.sh #!/bin/bash a=10 b=20 val=`expr $a + $b` echo &amp;quot;a + b : $val&amp;quot; val=`expr $a - $b` echo &amp;quot;a - b : $val&amp;quot; val=`expr $a \* $b` echo &amp;quot;a * b : $val&amp;quot; val=`expr $b / $a` echo &amp;quot;b / a : $val&amp;quot; val=`expr $b % $a` echo &amp;quot;b % a : $val&amp;quot; if [ $a == $b ] then echo &amp;quot;a == b&amp;quot; fi if [ $a !</description>
    </item>
    
    <item>
      <title>变量与参数</title>
      <link>http://example.org/posts/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%82%E6%95%B0-2/</link>
      <pubDate>Fri, 24 Apr 2020 10:03:45 +0000</pubDate>
      
      <guid>http://example.org/posts/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%82%E6%95%B0-2/</guid>
      <description>变量与参数 概念 变量的名字就是变量保存值的地方。引用变量的值就叫做变量替换。
如果 variable 是一个变量的名字，那么 $variable 就是引用这个变量的值，即这变量所包含的数据。
variable事实上只是variable 事实上只是 var iable事 实上只是 {variable} 的简写形式。在某些上下文中 variable可能会引起错误，这时候你就需要用variable 可能会引起错误，这时候你就需要用 variabl e可能会引起错 误，这时候你就 需要用 {variable} 了。
定义变量 定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如： myname=&amp;quot;shiyanlou&amp;rdquo;
注意
变量名和等号之间不能有空格。同时，变量名的命名须遵循如下规则：
 首个字符必须为字母（a-z，A-Z）。 中间不能有空格，可以使用下划线（_）。 不能使用标点符号。 不能使用bash里的关键字（可用help命令查看保留关键字）。  除了直接赋值，还可以用语句给变量赋值，如：for file in `ls /etc`
使用变量 变量名前加美元符号，如：
myname=&amp;quot;shiyanlou&amp;quot; echo $myname echo ${myname} echo ${myname}Good echo $mynameGood myname=&amp;quot;miao&amp;quot; echo ${myname}  加花括号帮助解释器识别变量的边界，若不加，解释器会把mynameGood当成一个变量（值为空）
推荐给所有变量加花括号
已定义的变量可以重新被定义
 只读变量 使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。 下面的例子尝试更改只读变量，结果报错：
#!/bin/bash myUrl=&amp;quot;http://www.shiyanlou.com&amp;quot; readonly myUrl myUrl=&amp;quot;http://www.shiyanlou.com&amp;quot; 运行脚本，结果如下：
/bin/sh: NAME: This variable is read only.</description>
    </item>
    
    <item>
      <title>变量与参数</title>
      <link>http://example.org/posts/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 24 Apr 2020 10:03:45 +0000</pubDate>
      
      <guid>http://example.org/posts/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%82%E6%95%B0/</guid>
      <description>变量与参数 概念 变量的名字就是变量保存值的地方。引用变量的值就叫做变量替换。
如果 variable 是一个变量的名字，那么 $variable 就是引用这个变量的值，即这变量所包含的数据。
variable事实上只是variable 事实上只是 variable事实上只是 {variable} 的简写形式。在某些上下文中 variable可能会引起错误，这时候你就 需要用 {variable} 了。
定义变量 定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如： myname=&amp;quot;shiyanlou&amp;rdquo;
注意
变量名和等号之间不能有空格。同时，变量名的命名须遵循如下规则：
 首个字符必须为字母（a-z，A-Z）。 中间不能有空格，可以使用下划线（_）。 不能使用标点符号。 不能使用bash里的关键字（可用help命令查看保留关键字）。  除了直接赋值，还可以用语句给变量赋值，如：for file in `ls /etc`
使用变量 变量名前加美元符号，如：
myname=&amp;quot;shiyanlou&amp;quot; echo $myname echo ${myname} echo ${myname}Good echo $mynameGood myname=&amp;quot;miao&amp;quot; echo ${myname}  加花括号帮助解释器识别变量的边界，若不加，解释器会把mynameGood当成一个变量（值为空）
推荐给所有变量加花括号
已定义的变量可以重新被定义
 只读变量 使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。 下面的例子尝试更改只读变量，结果报错：
#!/bin/bash myUrl=&amp;quot;http://www.shiyanlou.com&amp;quot; readonly myUrl myUrl=&amp;quot;http://www.shiyanlou.com&amp;quot; 运行脚本，结果如下：
/bin/sh: NAME: This variable is read only. 特殊变量 1.</description>
    </item>
    
    <item>
      <title>Bash</title>
      <link>http://example.org/posts/bash/</link>
      <pubDate>Fri, 24 Apr 2020 10:00:11 +0000</pubDate>
      
      <guid>http://example.org/posts/bash/</guid>
      <description>Bash 运行Bash脚本的方式：
 # 使用shell来执行 $ sh hello.sh # 使用bash来执行 $ bash hello.sh 使用.来执行 $ . ./hello.sh 使用source来执行 $ source hello.sh 还可以赋予脚本所有者执行权限，允许该用户执行该脚本 $ chmod u+rx hello.sh $ ./hello.sh  2.使用重定向 比如我们想要保存刚刚的hello world为一个文本，那么该怎么办呢？
&amp;gt; 这个符号是重定向,执行以下代码，就会在当前目录下生成一个my.txt。打开看看有没有hello world
 #!/bin/bash echo &amp;quot;Hello World&amp;quot; &amp;gt; my.txt 3.使用脚本清除/var/log下的log文件 首先我们看一看/var/log/wtmp里面有啥东西
cat /var/log/wtmp 这个文件中记录了系统的一些信息，现在我们需要写一个脚本把里面的东西清空，但是保留文件
$ vim cleanlogs.sh 说明：
 /dev/null这个东西可以理解为一个黑洞，里面是空的（可以用cat命令看一看）
 #!/bin/bash # 初始化一个变量 LOG_DIR=/var/log cd $LOG_DIR cat /dev/null &amp;gt; wtmp echo &amp;quot;Logs cleaned up.&amp;quot; exit 运行脚本前，先使用 sudo chmod +x cleanlogs.</description>
    </item>
    
    <item>
      <title>Bash特殊字符</title>
      <link>http://example.org/posts/bash%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Fri, 24 Apr 2020 09:59:52 +0000</pubDate>
      
      <guid>http://example.org/posts/bash%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
      <description>Bash特殊字符 注释# 行首以 # 开头(除#!之外)的是注释。#!是用于指定当前脚本的解释器，我们这里为bash，且应该指明完整路径，所以为/bin/bash
分号; 1.命令分隔符 使用分号（;）可以在同一行上写两个或两个以上的命令。
$ vim test2.sh 输入如下代码，并保存。
 #!/bin/bash echo hello; echo there filename=ttt.sh if [ -e &amp;quot;$filename&amp;quot; ]; then # 注意: &amp;quot;if&amp;quot;和&amp;quot;then&amp;quot;需要分隔，-e用于判断文件是否存在 echo &amp;quot;File $filename exists.&amp;quot;; cp $filename $filename.bak else echo &amp;quot;File $filename not found.&amp;quot;; touch $filename fi; echo &amp;quot;File test complete.&amp;quot; 2.终止case选项（双分号） 使用双分号（;;）可以终止case选项。
$ vim test3.sh 输入如下代码，并保存。
#!/bin/bash varname=b case &amp;quot;$varname&amp;quot; in [a-z]) echo &amp;quot;abc&amp;quot;;; [0-9]) echo &amp;quot;123&amp;quot;;; esac 点号. 等价于 source 命令 bash 中的 source 命令用于在当前 bash 环境下读取并执行 FileName.</description>
    </item>
    
    <item>
      <title>Shell常用通配符</title>
      <link>http://example.org/posts/shell%E5%B8%B8%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6/</link>
      <pubDate>Mon, 20 Apr 2020 11:50:10 +0000</pubDate>
      
      <guid>http://example.org/posts/shell%E5%B8%B8%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6/</guid>
      <description>Shell常用通配符    字符 含义     * 匹配 0 或多个字符   ? 匹配任意一个字符   [list] 匹配 list 中的任意单一字符   [^list] 匹配 除 list 中的任意单一字符以外的字符   [c1-c2] 匹配 c1-c2 中的任意单一字符 如：[0-9][a-z]   {string1,string2,...} 匹配 string1 或 string2 (或更多)其一字符串   {c1..c2} 匹配 c1-c2 中全部字符 如{1..10}    </description>
    </item>
    
  </channel>
</rss>