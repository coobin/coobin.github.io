<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on 梦还在吗</title>
    <link>http://example.org/tags/nginx/</link>
    <description>Recent content in Nginx on 梦还在吗</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 May 2020 10:24:20 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LNMP</title>
      <link>http://example.org/posts/lnmp/</link>
      <pubDate>Mon, 11 May 2020 10:24:20 +0000</pubDate>
      
      <guid>http://example.org/posts/lnmp/</guid>
      <description>LNMP 安装Nginx $ sudo apt-get update $ sudo apt-get install -y nginx 启动命令 $ sudo /etc/init.d/nginx start # 或者使用如下的命令 $ sudo service nginx start 停止命令 $ sudo /etc/init.d/nginx stop # 或者使用如下的命令 $ sudo service nginx stop 重启命令 $ sudo /etc/init.d/nginx restart # 或者使用如下的命令 $ sudo service nginx restart 基础配置 $ sudo vim /etc/nginx/sites-available/default
Php配置  location ~ \.php$ { root /var/www/html; fastcgi_pass unix:/run/php/php7.0-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } 配置测试 sudo nginx -t</description>
    </item>
    
    <item>
      <title>Nginx开发从入门到精通</title>
      <link>http://example.org/posts/nginx%E5%BC%80%E5%8F%91%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</link>
      <pubDate>Fri, 08 May 2020 06:41:10 +0000</pubDate>
      
      <guid>http://example.org/posts/nginx%E5%BC%80%E5%8F%91%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</guid>
      <description>Nginx开发从入门到精通 </description>
    </item>
    
    <item>
      <title>Nginx 模块</title>
      <link>http://example.org/posts/nginx-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 06 May 2020 10:44:11 +0000</pubDate>
      
      <guid>http://example.org/posts/nginx-%E6%A8%A1%E5%9D%97/</guid>
      <description>Nginx 模块 Nginx 真正的魅力在于它的模块，整个应用程序建立在一个模块化系统之上，在编译时，可以对每一个模块进行启用或者禁用，需要什么就定制什么。
对 Nginx 模块的基本原理总结一下，基本就是：在特定地方调用函数。（Nginx 本身支持多种模块，如 HTTP 模块、EVENTS 模块和 MAIL 模块，这里只简单讲述 HTTP 的模块及其中的命令）
下面是配置文件结构图：
Nginx 本身做的工作实际很少，当它接到一个 HTTP 请求时，它仅仅是通过查找配置文件将此次请求映射到一个 location block，而此 location 中所配置的各个指令则会启动不同的模块去完成工作，因此模块可以看做 Nginx 真正的劳动工作者。
 通常一个 location 中的指令会涉及一个 handler 模块和多个 filter 模块（当然，多个 location 可以复用同一个模块）。  handler 模块负责处理请求，完成响应内容的生成； filter 模块对响应内容进行处理。    因此 Nginx 模块开发分为 handler 开发和 filter 开发（本文不考虑 load-balancer 模块）。
下图展示了一次常规请求和响应的过程。
http index 模块 模块：ngx_http_index_module
语法：
index file ...; 配置范例：
location / { index index.$geo.html index.html; } 默认值：index index.</description>
    </item>
    
    <item>
      <title>Nginx 架构与进程</title>
      <link>http://example.org/posts/nginx-%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Wed, 06 May 2020 10:37:00 +0000</pubDate>
      
      <guid>http://example.org/posts/nginx-%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%BF%9B%E7%A8%8B/</guid>
      <description>Nginx 架构与进程 Nginx 架构 Nginx 的代码是由一个 核心 和一系列的 模块 组成。
核心 核心的功能如下：
 主要用于提供 WebServer 的基本功能； 实现 Web 和 Mail 反向代理的功能； 还用于启用网络协议； 创建必要的运行时环境以及确保不同的模块之间平滑地进行交互。  模块 大多跟协议相关的功能和应用特有的功能都是由 Nginx 的模块实现的。
这些功能模块大致可以分为：事件模块、阶段性处理器、输出过滤器、变量处理器、协议、upstream 和负载均衡几个类别，这些功能模块共同组成了 Nginx 的 http 功能。
其中：
 事件模块主要用于提供 OS 独立的（不同操作系统的事件机制有所不同）事件通知机制，如 kqueue 或 epoll 等。 协议模块则负责实现 Nginx 通过 HTTP、TLS/SSL、SMTP、POP3 以及 IMAP 与对应的客户端建立会话。   在 Nginx 内部，进程间的通信是通过模块的 pipeline 或 chain 实现的。
 每一个功能或操作都由一个模块来实现。例如：压缩、通过 FastCGI 或 uwsgi 协议与 upstream 服务器通信、以及与 memcached 建立会话等。
Nginx 进程 首先我们要知道，Nginx 是以多进程的方式来工作的，当然 Nginx 也是支持多线程的方式的。</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>http://example.org/posts/nginx-2/</link>
      <pubDate>Wed, 06 May 2020 09:30:15 +0000</pubDate>
      
      <guid>http://example.org/posts/nginx-2/</guid>
      <description>Nginx 什么是Nginx Nginx 是一款高性能的 HTTP 和反向代理服务器软件
Nginx 和 Apache 相同点  同是 HTTP 服务器软件，都采用模块化结构设计 支持通用语言接口，如 PHP、Python 等 支持正向代理和反向代理 支持虚拟主机及 SSL 加密传输 支持缓存及压缩传输 支持 URL 重写 模块多，扩展性强 多平台支持  优势与劣势 Nginx 的优势  轻量级：安装文件小，运行时 CPU 内存使用率低； 性能强：支持多核，处理静态文件效率高，内核采用的 poll 模型最大可以支持 50K 并发连接； 支持热部署，同时启动速度快，可以在不间断服务的情况下对软件和配置进行升级； 负载均衡，支持容错和健康检查； 代理功能强大，支持无缓存的反向代理，同时支持 IMAP/POP3/SMTP 的代理。  Nginx 的劣势  相比 Apache 模块要少一些，常用模块都有，支持 LUA 语言扩展功能 对动态请求支持不如 Apache Windows 版本功能有限，受限于 Windows 的特性，支持最好的还是 Unix/Linux 系统  Nginx 工作原理 Nginx 由内核和一系列模块组成：内核提供 web 服务的基本功能，如启用网络协议、创建运行环境、接收和分配客户端请求、处理模块之间的交互。模块实现 Nginx 的各种功能和操作，Nginx 的模块从结构上分为核心模块、基础模块和第三方模块。</description>
    </item>
    
  </channel>
</rss>